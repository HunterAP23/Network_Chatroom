
#pragma warning(disable:4996)
#include "stdafx.h"
#include "ServerClass.h"

using namespace std;

const int MAX_SOC=64;
int SOC[MAX_SOC];
/* Function to prepare to receive connections for a service. */
static SOCKET passiveTCP(char *service, int qlen);

bool CheckingErrorsWinSock()
{
	auto error = WSAGetLastError();

	if (error == WSANOTINITIALISED) {
		cerr << "WSA not initialized" << endl;
		return true;
	}

	if (error == WSAHOST_NOT_FOUND) {
		cerr << "Host Not found" << endl;
		return true;
	}

	if (error == WSANO_RECOVERY) {
		cerr << "Services database not accessible, no recovery." << endl;
		return true;
	}

	if (error == WSAEINTR) {
		cerr << "A blocking function was canceled" << endl;
		return true;
	}

	if (error == WSANO_DATA) {
		cerr << "No Data found" << endl;
		return true;
	}
	//
	if (error == WSAEFAULT) {
		cerr << "the name parameter is not part of the valid user address space" << endl;
		return true;
	}

	if (error == WSAENETDOWN) {
		cerr << "Network down" << endl;
		return true;
	}

	if (error == WSAEADDRINUSE) {
		cerr << "The socket's local address is already in use" << endl;
		return true;
	}

	if (error == WSAEALREADY) {
		cerr << "A nonblocking connect call is in progress on this socket" << endl;
		return true;
	}

	if (error == WSAEADDRNOTAVAIL) {
		cerr << "The remote address is not a valid address" << endl;
		return true;
	}

	if (error == WSAECONNREFUSED) {
		cerr << "The attempt to connect was forcefully rejected." << endl;
		return true;
	}

	if (error == WSAEFAULT) {
		cerr << " incorrect address format." << endl;
		return true;
	}

	if (error == WSAEINVAL) {
		cerr << "The parameter is a listening socket." << endl;
		return true;
	}

	if (error == WSAENOBUFS) {
		cerr << "No buffer space" << endl;
		return true;
	}

	if (error == WSAENOTSOCK) {
		cerr << "The descriptor specified in the s parameter is not a socket." << endl;
		return true;
	}

	if (error == WSAETIMEDOUT) {
		cerr << "An attempt to connect timed out without establishing a connection." << endl;
		return true;
	}

	if (error == WSAEWOULDBLOCK) {
		cerr << "The socket is marked as nonblocking and the connection cannot be completed immediately." << endl;
		return true;
	}

	if (error == WSAEACCES) {
		cerr << "An attempt to connect a datagram socket to broadcast address failed because setsockopt option SO_BROADCAST is not enabled." << endl;
		return true;
	}
	return false;
}

/**/
/*
NAME

server - to receive connections from clients and report back the time.

SYNOPSIS

server [service]

DESCRIPTION

The server process with receive connections from client processes and
send back the date and time.
*/
/**/
int main(int argc, char *argv[])
{
	//test functions here
	ServerClass Server;
	Server.LoadWhiteList();

	Server.CheckWhiteList("BobbyKennedy", "OneDay");
	Server.CheckWhiteList("PPearse", "FuckTheChurch");

	// Make sure that we can connect:
	WORD wVersionRequested;
	WSADATA wsaData;
	int err;

	wVersionRequested = MAKEWORD(1, 1);  // A macro to create a word with low order and high order bytes as specified.

	err = WSAStartup(wVersionRequested, &wsaData);

	if (err != 0) {

		// Tell the user that we couldn't find a useable winsock.dll. */
		cerr << "Could not find useable DLL" << endl;
		return 1;
	}

	// Confirm that the Windows Sockets DLL supports version 1.1.
	// Note that if the DLL supports versions greater than 1.1 in addition 
	//  to 1.1, it will still return1.1 in wVersion since that is the version we/
	// requested.  Note the use of macros.

	if (LOBYTE(wsaData.wVersion) != 1 || HIBYTE(wsaData.wVersion) != 1) {

		// Tell the user that we couldn't find a useable winsock DLL. 
		WSACleanup();  // Terminates the use of the 
		cerr << "Could not find useable DLL" << endl;
		return 1;
	}
	char *service = "7007"; // The service to be provided.

							/* Fill in the remote host name and service name from the run-time
							* parameters. */
	switch (argc) {

		/* If there are no run-time parameters the default values will be
		* used. */
	case 1:
		break;

		/* Record the host name. */
	case 2:
		service = argv[1];
		break;

		/* If there are more than 1 run-time parameters, the user is in
		* error. */
	default:
		fprintf(stderr, "Usage: server [service]\n");
		exit(1);
	}
	char echobuff[1024];

	/* Connect to the server process. */
	SOCKET ls = passiveTCP(service, 5); //listening socket
	int ndfs = 0;
	fd_set readfds; //readmap
	FD_ZERO(&readfds); //zero map
	//SOCKET SOC;
	 
	for (int i = 0; i < MAX_SOC; i++)
	{
		SOC[i] = 0; //clear all to zero (the value that will be ignored in further loop)
	}	

	/* Note: the casing of the address sockaddr_in to sockaddr is
		* neccessary to support other types of connections which use
		* different address families. */
		struct sockaddr_in fsin;// Address of the client.
		int alen = sizeof(sockaddr_in);  // Length of client address.  UNIX does not 
										 // require that you specify a size.
		
	/* Wait for connections from clients. */
	while (true) {
		FD_SET(ls, &readfds); //make sure listening socket is in readmap as well
		for (int i = 0; i < MAX_SOC; i++) //loop to reset readmap
		{
			if (SOC[i] != 0) //if something is stored in SOC[i], put it in the readmap
			{
				if (SOC[i] > ndfs-1) //set ndfs
				{
					ndfs = SOC[i] + 1; //set ndfs
				}
				FD_SET(SOC[i], &readfds); //add all recorded to readmap
			}
		}
		
		int rv = (select(ndfs, &readfds, NULL, NULL, NULL)); //return value is number of sockets ready to be read from
		if (rv == -1)
		{
			//error, quit?
		}

		if (FD_ISSET(ls, &readfds)) //make sure to check for listen socket too, if yes then we add to record the new connection attempt
		{
			SOCKET s = accept(ls, (struct sockaddr *) &fsin, &alen/*NULL*/);
			if (s == INVALID_SOCKET) { // did accept fail?
				cerr << ("Accept failed with an error \n", WSAGetLastError());
				closesocket(ls); //close and get out
				return 1;
			}
			if (s > ndfs-1 == true) // is new socket the largest?
			{
				ndfs = s + 1; // set new ndfs
			}
			if (s == INVALID_SOCKET) {
				int errorcode = WSAGetLastError();
				continue;
			}
			for (int i = 0; i < MAX_SOC; i++)
			{
				if (SOC[i] == 0) //is this spot open?
				{
					SOC[i] = s; //find first open spot in Soc array and store the new socket
					break; //found an open spot, lets bail on this loop
				}
			} //end add soc loop
		}//end if (listen socket is waiting) statement
		
		int readval;
		for (int i = 0; i < MAX_SOC; i++) //echo loop
		{
				if (FD_ISSET(SOC[i], &readfds)) {
					readval = recv(SOC[i], echobuff, 1024, NULL);
					if (readval == 0) //they disconnected
					{
						closesocket(SOC[i]); //make sure to close the socket
						FD_CLR(SOC[i], &readfds); //remove from readmap
						SOC[i] = 0; //remove record
					}
					if (readval == -1) //error, we will disconnect
					{
						closesocket(SOC[i]); //make sure to close the socket
						FD_CLR(SOC[i], &readfds); //remove from readmap
						SOC[i] = 0; //remove record
					}
					int result = send(SOC[i], echobuff, readval, NULL);
					if (result == SOCKET_ERROR)
					{
						CheckingErrorsWinSock();
					}
				}
		} //end for loop checking for messages
	}//end while loop
}//end main


/*
NAME

passiveTCP - allocates and binds a server socket using TCP

SYNOPSYS
*/
static SOCKET passiveTCP(char *service, int qlen)
/*
DESCRIPTION

This function will create a socket, bind the server "service" to
it and perhpare to listen for connections with a queue length of
"qlen".

RETURNS

This function returns the listening socket if it is successful and
does not return if it fails.
*/
{
	struct servent *pse; /* Points to service information. */
	struct sockaddr_in sin; /* Internet endpoint address. */

							/* Create an end point address for this computer. We use INADDR_ANY
							* for the address of the computer so that we may receive connection
							* requests through any of the computer's IP addresses.  */
	memset((char *)&sin, 0, sizeof(sockaddr_in));
	sin.sin_family = AF_INET;
	sin.sin_addr.s_addr = INADDR_ANY;

	/* Get the port number for the service. */
	if ((pse = getservbyname(service, "tcp")) != NULL) {
		sin.sin_port = (u_short)pse->s_port;
	}
	else if ((sin.sin_port = htons((u_short)atoi(service))) == 0) {
		CheckingErrorsWinSock();
		exit(1);
	}
	/* Allocate a socket. */
	SOCKET ls;
	if ((ls = socket(PF_INET, SOCK_STREAM, 0)) < 0) {
		CheckingErrorsWinSock();
		exit(1);
	}
	/* Bind the address to the socket. */
	if (bind(ls, (struct sockaddr *) &sin, sizeof(sin)) < 0) {
		CheckingErrorsWinSock();
		exit(1);
	}
	// Indicate that we are ready to wait for connects.
	if (listen(ls, qlen) < 0) {
		CheckingErrorsWinSock();
		exit(1);
	}
	// Return the listening socket. 
	return ls;
}
